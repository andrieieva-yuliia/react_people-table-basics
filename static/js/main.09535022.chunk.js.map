{"version":3,"sources":["components/NavLinkPage/NavLinkPage.tsx","components/NavBar/NavBar.tsx","components/NotFoundPage/NotFoundPage.tsx","components/HomePage/HomePage.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["NavLinkPage","React","memo","to","text","className","isActive","classNames","NavBar","role","NotFoundPage","HomePage","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","slug","sex","name","isWoman","PeopleTable","people","selectedSlug","map","born","died","motherName","fatherName","isSlugSelected","mother","father","preparePeople","find","mom","dad","PeoplePage","useState","setPeople","isLoading","setIsLoading","hasError","setHasError","useParams","fetchPeople","data","isPeopleExist","useMemo","length","useEffect","App","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.09535022.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink, To } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  to: To,\n  text: string,\n};\n\nexport const NavLinkPage: React.FC<Props> = React.memo(({ to, text }) => (\n  <NavLink\n    className={({ isActive }) => {\n      return classNames('navbar-item', {\n        'has-background-grey-lighter': isActive,\n      });\n    }}\n    to={to}\n  >\n    {text}\n  </NavLink>\n));\n","import React from 'react';\nimport { NavLinkPage } from '../NavLinkPage';\n\nexport const NavBar: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLinkPage to=\"/\" text=\"Home\" />\n\n        <NavLinkPage to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","export const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import React from 'react';\n\nexport const HomePage = React.memo(() => (\n  <h1 className=\"title\">Home Page</h1>\n));\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = React.memo(({ person }) => {\n  const {\n    slug,\n    sex,\n    name,\n  } = person;\n  const isWoman = sex === 'f';\n\n  return (\n    <Link\n      to={`/people/${slug}`}\n      className={classNames({ 'has-text-danger': isWoman })}\n    >\n      {name}\n    </Link>\n  );\n});\n","import classNames from 'classnames';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  people: Person[]\n  selectedSlug: string\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectedSlug }) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Sex</th>\n        <th>Born</th>\n        <th>Died</th>\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {people.map(person => {\n        const {\n          slug,\n          sex,\n          born,\n          died,\n          motherName,\n          fatherName,\n        } = person;\n\n        const isSlugSelected = slug === selectedSlug;\n\n        return (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={classNames(\n              { 'has-background-warning': isSlugSelected },\n            )}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{sex}</td>\n            <td>{born}</td>\n            <td>{died}</td>\n            <td>\n              {person.mother\n                ? <PersonLink person={person.mother} />\n                : (motherName || '-')}\n            </td>\n            <td>\n              {person.father\n                ? <PersonLink person={person.father} />\n                : (fatherName || '-')}\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const preparePeople = (people: Person[]) => {\n  return people.map(person => {\n    const mother = people.find(mom => mom.name === person.motherName);\n    const father = people.find(dad => dad.name === person.fatherName);\n\n    return {\n      ...person,\n      mother,\n      father,\n    };\n  });\n};\n\nexport const PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<Person[] | []>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  const { slug = '' } = useParams();\n\n  const fetchPeople = async () => {\n    try {\n      let data = await getPeople();\n\n      data = preparePeople(data);\n      setPeople(data);\n      setIsLoading(false);\n    } catch {\n      setHasError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const isPeopleExist = useMemo(() => {\n    return people.length === 0 && !isLoading;\n  }, [people]);\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      {isLoading && <Loader />}\n\n      {hasError && (\n        <p\n          data-cy=\"peopleLoadingError\"\n          className=\"has-text-danger\"\n        >\n          Something went wrong\n        </p>\n      )}\n\n      {people.length > 0 && (\n        <PeopleTable\n          people={people}\n          selectedSlug={slug}\n        />\n      )}\n\n      {isPeopleExist && (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      )}\n    </>\n  );\n};\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n    <main className=\"section\">\n      <Routes>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"/people\" element={<PeoplePage />}>\n          <Route path=\":slug\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Routes>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}